(set-option :print-success false)
(set-option :produce-models true)
(set-logic AUFLIRA)
(declare-fun n () Int)
(declare-fun d () Int)
(assert (> d 0))
(declare-fun t_routeSignalTmp.permissive.begin (Int) Bool)
(declare-fun h_routeSignalTmp.permissive.begin (Int) Int)
(assert (= (h_routeSignalTmp.permissive.begin 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_routeSignalTmp.permissive.begin x) (= (h_routeSignalTmp.permissive.begin (+ x 1)) (+ (h_routeSignalTmp.permissive.begin x) 1)) (= (h_routeSignalTmp.permissive.begin (+ x 1)) (h_routeSignalTmp.permissive.begin x))))))
(declare-fun t_route.unallocated.begin (Int) Bool)
(declare-fun h_route.unallocated.begin (Int) Int)
(assert (= (h_route.unallocated.begin 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_route.unallocated.begin x) (= (h_route.unallocated.begin (+ x 1)) (+ (h_route.unallocated.begin x) 1)) (= (h_route.unallocated.begin (+ x 1)) (h_route.unallocated.begin x))))))
(declare-fun t_route.unoccupied.begin (Int) Bool)
(declare-fun h_route.unoccupied.begin (Int) Int)
(assert (= (h_route.unoccupied.begin 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_route.unoccupied.begin x) (= (h_route.unoccupied.begin (+ x 1)) (+ (h_route.unoccupied.begin x) 1)) (= (h_route.unoccupied.begin (+ x 1)) (h_route.unoccupied.begin x))))))
(declare-fun t_routeSignal.permissive.begin (Int) Bool)
(declare-fun h_routeSignal.permissive.begin (Int) Int)
(assert (= (h_routeSignal.permissive.begin 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_routeSignal.permissive.begin x) (= (h_routeSignal.permissive.begin (+ x 1)) (+ (h_routeSignal.permissive.begin x) 1)) (= (h_routeSignal.permissive.begin (+ x 1)) (h_routeSignal.permissive.begin x))))))
(declare-fun t_train.non_talkativeTrainRunningApproach.begin (Int) Bool)
(declare-fun h_train.non_talkativeTrainRunningApproach.begin (Int) Int)
(assert (= (h_train.non_talkativeTrainRunningApproach.begin 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_train.non_talkativeTrainRunningApproach.begin x) (= (h_train.non_talkativeTrainRunningApproach.begin (+ x 1)) (+ (h_train.non_talkativeTrainRunningApproach.begin x) 1)) (= (h_train.non_talkativeTrainRunningApproach.begin (+ x 1)) (h_train.non_talkativeTrainRunningApproach.begin x))))))
(declare-fun t_routeSignalTmp.permissive.end (Int) Bool)
(declare-fun h_routeSignalTmp.permissive.end (Int) Int)
(assert (= (h_routeSignalTmp.permissive.end 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_routeSignalTmp.permissive.end x) (= (h_routeSignalTmp.permissive.end (+ x 1)) (+ (h_routeSignalTmp.permissive.end x) 1)) (= (h_routeSignalTmp.permissive.end (+ x 1)) (h_routeSignalTmp.permissive.end x))))))
(declare-fun t_route.unallocated.end (Int) Bool)
(declare-fun h_route.unallocated.end (Int) Int)
(assert (= (h_route.unallocated.end 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_route.unallocated.end x) (= (h_route.unallocated.end (+ x 1)) (+ (h_route.unallocated.end x) 1)) (= (h_route.unallocated.end (+ x 1)) (h_route.unallocated.end x))))))
(declare-fun t_route.unoccupied.end (Int) Bool)
(declare-fun h_route.unoccupied.end (Int) Int)
(assert (= (h_route.unoccupied.end 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_route.unoccupied.end x) (= (h_route.unoccupied.end (+ x 1)) (+ (h_route.unoccupied.end x) 1)) (= (h_route.unoccupied.end (+ x 1)) (h_route.unoccupied.end x))))))
(declare-fun t_routeSignal.permissive.end (Int) Bool)
(declare-fun h_routeSignal.permissive.end (Int) Int)
(assert (= (h_routeSignal.permissive.end 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_routeSignal.permissive.end x) (= (h_routeSignal.permissive.end (+ x 1)) (+ (h_routeSignal.permissive.end x) 1)) (= (h_routeSignal.permissive.end (+ x 1)) (h_routeSignal.permissive.end x))))))
(declare-fun t_train.non_talkativeTrainRunningApproach.end (Int) Bool)
(declare-fun h_train.non_talkativeTrainRunningApproach.end (Int) Int)
(assert (= (h_train.non_talkativeTrainRunningApproach.end 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_train.non_talkativeTrainRunningApproach.end x) (= (h_train.non_talkativeTrainRunningApproach.end (+ x 1)) (+ (h_train.non_talkativeTrainRunningApproach.end x) 1)) (= (h_train.non_talkativeTrainRunningApproach.end (+ x 1)) (h_train.non_talkativeTrainRunningApproach.end x))))))
(declare-fun t_routeTmp.occupied.begin (Int) Bool)
(declare-fun h_routeTmp.occupied.begin (Int) Int)
(assert (= (h_routeTmp.occupied.begin 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_routeTmp.occupied.begin x) (= (h_routeTmp.occupied.begin (+ x 1)) (+ (h_routeTmp.occupied.begin x) 1)) (= (h_routeTmp.occupied.begin (+ x 1)) (h_routeTmp.occupied.begin x))))))
(declare-fun t_route.occupied.begin (Int) Bool)
(declare-fun h_route.occupied.begin (Int) Int)
(assert (= (h_route.occupied.begin 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_route.occupied.begin x) (= (h_route.occupied.begin (+ x 1)) (+ (h_route.occupied.begin x) 1)) (= (h_route.occupied.begin (+ x 1)) (h_route.occupied.begin x))))))
(declare-fun t_routeTmp.occupied.end (Int) Bool)
(declare-fun h_routeTmp.occupied.end (Int) Int)
(assert (= (h_routeTmp.occupied.end 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_routeTmp.occupied.end x) (= (h_routeTmp.occupied.end (+ x 1)) (+ (h_routeTmp.occupied.end x) 1)) (= (h_routeTmp.occupied.end (+ x 1)) (h_routeTmp.occupied.end x))))))
(declare-fun t_route.occupied.end (Int) Bool)
(declare-fun h_route.occupied.end (Int) Int)
(assert (= (h_route.occupied.end 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_route.occupied.end x) (= (h_route.occupied.end (+ x 1)) (+ (h_route.occupied.end x) 1)) (= (h_route.occupied.end (+ x 1)) (h_route.occupied.end x))))))
(declare-fun t_tmpState_1 (Int) Bool)
(declare-fun h_tmpState_1 (Int) Int)
(assert (= (h_tmpState_1 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_tmpState_1 x) (= (h_tmpState_1 (+ x 1)) (+ (h_tmpState_1 x) 1)) (= (h_tmpState_1 (+ x 1)) (h_tmpState_1 x))))))
(declare-fun t_tmpState_2 (Int) Bool)
(declare-fun h_tmpState_2 (Int) Int)
(assert (= (h_tmpState_2 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_tmpState_2 x) (= (h_tmpState_2 (+ x 1)) (+ (h_tmpState_2 x) 1)) (= (h_tmpState_2 (+ x 1)) (h_tmpState_2 x))))))
(declare-fun t_tmpState_11 (Int) Bool)
(declare-fun h_tmpState_11 (Int) Int)
(assert (= (h_tmpState_11 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_tmpState_11 x) (= (h_tmpState_11 (+ x 1)) (+ (h_tmpState_11 x) 1)) (= (h_tmpState_11 (+ x 1)) (h_tmpState_11 x))))))
(declare-fun t_tmpState_12 (Int) Bool)
(declare-fun h_tmpState_12 (Int) Int)
(assert (= (h_tmpState_12 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_tmpState_12 x) (= (h_tmpState_12 (+ x 1)) (+ (h_tmpState_12 x) 1)) (= (h_tmpState_12 (+ x 1)) (h_tmpState_12 x))))))
(declare-fun t_tmpState_13 (Int) Bool)
(declare-fun h_tmpState_13 (Int) Int)
(assert (= (h_tmpState_13 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_tmpState_13 x) (= (h_tmpState_13 (+ x 1)) (+ (h_tmpState_13 x) 1)) (= (h_tmpState_13 (+ x 1)) (h_tmpState_13 x))))))
(declare-fun t_stateTmp.begin (Int) Bool)
(declare-fun h_stateTmp.begin (Int) Int)
(assert (= (h_stateTmp.begin 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_stateTmp.begin x) (= (h_stateTmp.begin (+ x 1)) (+ (h_stateTmp.begin x) 1)) (= (h_stateTmp.begin (+ x 1)) (h_stateTmp.begin x))))))
(declare-fun t_state.begin (Int) Bool)
(declare-fun h_state.begin (Int) Int)
(assert (= (h_state.begin 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_state.begin x) (= (h_state.begin (+ x 1)) (+ (h_state.begin x) 1)) (= (h_state.begin (+ x 1)) (h_state.begin x))))))
(declare-fun t_stateTmp.end (Int) Bool)
(declare-fun h_stateTmp.end (Int) Int)
(assert (= (h_stateTmp.end 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_stateTmp.end x) (= (h_stateTmp.end (+ x 1)) (+ (h_stateTmp.end x) 1)) (= (h_stateTmp.end (+ x 1)) (h_stateTmp.end x))))))
(declare-fun t_state.end (Int) Bool)
(declare-fun h_state.end (Int) Int)
(assert (= (h_state.end 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_state.end x) (= (h_state.end (+ x 1)) (+ (h_state.end x) 1)) (= (h_state.end (+ x 1)) (h_state.end x))))))
(declare-fun t_train.non_talkativeTrainRunOnRoute (Int) Bool)
(declare-fun h_train.non_talkativeTrainRunOnRoute (Int) Int)
(assert (= (h_train.non_talkativeTrainRunOnRoute 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_train.non_talkativeTrainRunOnRoute x) (= (h_train.non_talkativeTrainRunOnRoute (+ x 1)) (+ (h_train.non_talkativeTrainRunOnRoute x) 1)) (= (h_train.non_talkativeTrainRunOnRoute (+ x 1)) (h_train.non_talkativeTrainRunOnRoute x))))))
(declare-fun t_tmpState (Int) Bool)
(declare-fun h_tmpState (Int) Int)
(assert (= (h_tmpState 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_tmpState x) (= (h_tmpState (+ x 1)) (+ (h_tmpState x) 1)) (= (h_tmpState (+ x 1)) (h_tmpState x))))))
(declare-fun t_state_2.begin (Int) Bool)
(declare-fun h_state_2.begin (Int) Int)
(assert (= (h_state_2.begin 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_state_2.begin x) (= (h_state_2.begin (+ x 1)) (+ (h_state_2.begin x) 1)) (= (h_state_2.begin (+ x 1)) (h_state_2.begin x))))))
(declare-fun t_state_2.end (Int) Bool)
(declare-fun h_state_2.end (Int) Int)
(assert (= (h_state_2.end 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_state_2.end x) (= (h_state_2.end (+ x 1)) (+ (h_state_2.end x) 1)) (= (h_state_2.end (+ x 1)) (h_state_2.end x))))))
(declare-fun t_routeSignal.restrictive.begin (Int) Bool)
(declare-fun h_routeSignal.restrictive.begin (Int) Int)
(assert (= (h_routeSignal.restrictive.begin 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_routeSignal.restrictive.begin x) (= (h_routeSignal.restrictive.begin (+ x 1)) (+ (h_routeSignal.restrictive.begin x) 1)) (= (h_routeSignal.restrictive.begin (+ x 1)) (h_routeSignal.restrictive.begin x))))))
(declare-fun t_tmp (Int) Bool)
(declare-fun h_tmp (Int) Int)
(assert (= (h_tmp 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_tmp x) (= (h_tmp (+ x 1)) (+ (h_tmp x) 1)) (= (h_tmp (+ x 1)) (h_tmp x))))))
(declare-fun t_tmpState_4 (Int) Bool)
(declare-fun h_tmpState_4 (Int) Int)
(assert (= (h_tmpState_4 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_tmpState_4 x) (= (h_tmpState_4 (+ x 1)) (+ (h_tmpState_4 x) 1)) (= (h_tmpState_4 (+ x 1)) (h_tmpState_4 x))))))
(declare-fun t_routeSignal.restrictive.end (Int) Bool)
(declare-fun h_routeSignal.restrictive.end (Int) Int)
(assert (= (h_routeSignal.restrictive.end 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_routeSignal.restrictive.end x) (= (h_routeSignal.restrictive.end (+ x 1)) (+ (h_routeSignal.restrictive.end x) 1)) (= (h_routeSignal.restrictive.end (+ x 1)) (h_routeSignal.restrictive.end x))))))
(declare-fun t_tmpState_5 (Int) Bool)
(declare-fun h_tmpState_5 (Int) Int)
(assert (= (h_tmpState_5 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_tmpState_5 x) (= (h_tmpState_5 (+ x 1)) (+ (h_tmpState_5 x) 1)) (= (h_tmpState_5 (+ x 1)) (h_tmpState_5 x))))))
(declare-fun t_state_4Tmp.begin (Int) Bool)
(declare-fun h_state_4Tmp.begin (Int) Int)
(assert (= (h_state_4Tmp.begin 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_state_4Tmp.begin x) (= (h_state_4Tmp.begin (+ x 1)) (+ (h_state_4Tmp.begin x) 1)) (= (h_state_4Tmp.begin (+ x 1)) (h_state_4Tmp.begin x))))))
(declare-fun t_train.talkativeTrainRunningApproach.begin (Int) Bool)
(declare-fun h_train.talkativeTrainRunningApproach.begin (Int) Int)
(assert (= (h_train.talkativeTrainRunningApproach.begin 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_train.talkativeTrainRunningApproach.begin x) (= (h_train.talkativeTrainRunningApproach.begin (+ x 1)) (+ (h_train.talkativeTrainRunningApproach.begin x) 1)) (= (h_train.talkativeTrainRunningApproach.begin (+ x 1)) (h_train.talkativeTrainRunningApproach.begin x))))))
(declare-fun t_state_4.begin (Int) Bool)
(declare-fun h_state_4.begin (Int) Int)
(assert (= (h_state_4.begin 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_state_4.begin x) (= (h_state_4.begin (+ x 1)) (+ (h_state_4.begin x) 1)) (= (h_state_4.begin (+ x 1)) (h_state_4.begin x))))))
(declare-fun t_state_4Tmp.end (Int) Bool)
(declare-fun h_state_4Tmp.end (Int) Int)
(assert (= (h_state_4Tmp.end 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_state_4Tmp.end x) (= (h_state_4Tmp.end (+ x 1)) (+ (h_state_4Tmp.end x) 1)) (= (h_state_4Tmp.end (+ x 1)) (h_state_4Tmp.end x))))))
(declare-fun t_train.talkativeTrainRunningApproach.end (Int) Bool)
(declare-fun h_train.talkativeTrainRunningApproach.end (Int) Int)
(assert (= (h_train.talkativeTrainRunningApproach.end 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_train.talkativeTrainRunningApproach.end x) (= (h_train.talkativeTrainRunningApproach.end (+ x 1)) (+ (h_train.talkativeTrainRunningApproach.end x) 1)) (= (h_train.talkativeTrainRunningApproach.end (+ x 1)) (h_train.talkativeTrainRunningApproach.end x))))))
(declare-fun t_state_4.end (Int) Bool)
(declare-fun h_state_4.end (Int) Int)
(assert (= (h_state_4.end 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_state_4.end x) (= (h_state_4.end (+ x 1)) (+ (h_state_4.end x) 1)) (= (h_state_4.end (+ x 1)) (h_state_4.end x))))))
(declare-fun t_route.toBeAllocated (Int) Bool)
(declare-fun h_route.toBeAllocated (Int) Int)
(assert (= (h_route.toBeAllocated 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_route.toBeAllocated x) (= (h_route.toBeAllocated (+ x 1)) (+ (h_route.toBeAllocated x) 1)) (= (h_route.toBeAllocated (+ x 1)) (h_route.toBeAllocated x))))))
(declare-fun t_tmpState_6 (Int) Bool)
(declare-fun h_tmpState_6 (Int) Int)
(assert (= (h_tmpState_6 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_tmpState_6 x) (= (h_tmpState_6 (+ x 1)) (+ (h_tmpState_6 x) 1)) (= (h_tmpState_6 (+ x 1)) (h_tmpState_6 x))))))
(declare-fun t_tmpState_18 (Int) Bool)
(declare-fun h_tmpState_18 (Int) Int)
(assert (= (h_tmpState_18 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_tmpState_18 x) (= (h_tmpState_18 (+ x 1)) (+ (h_tmpState_18 x) 1)) (= (h_tmpState_18 (+ x 1)) (h_tmpState_18 x))))))
(declare-fun t_train.talkativeTrainRunAcrossSignal (Int) Bool)
(declare-fun h_train.talkativeTrainRunAcrossSignal (Int) Int)
(assert (= (h_train.talkativeTrainRunAcrossSignal 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_train.talkativeTrainRunAcrossSignal x) (= (h_train.talkativeTrainRunAcrossSignal (+ x 1)) (+ (h_train.talkativeTrainRunAcrossSignal x) 1)) (= (h_train.talkativeTrainRunAcrossSignal (+ x 1)) (h_train.talkativeTrainRunAcrossSignal x))))))
(declare-fun t_route.allocated.begin (Int) Bool)
(declare-fun h_route.allocated.begin (Int) Int)
(assert (= (h_route.allocated.begin 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_route.allocated.begin x) (= (h_route.allocated.begin (+ x 1)) (+ (h_route.allocated.begin x) 1)) (= (h_route.allocated.begin (+ x 1)) (h_route.allocated.begin x))))))
(declare-fun t_train.talkativeTrainRunOnRoute (Int) Bool)
(declare-fun h_train.talkativeTrainRunOnRoute (Int) Int)
(assert (= (h_train.talkativeTrainRunOnRoute 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_train.talkativeTrainRunOnRoute x) (= (h_train.talkativeTrainRunOnRoute (+ x 1)) (+ (h_train.talkativeTrainRunOnRoute x) 1)) (= (h_train.talkativeTrainRunOnRoute (+ x 1)) (h_train.talkativeTrainRunOnRoute x))))))
(declare-fun t_route.allocated.end (Int) Bool)
(declare-fun h_route.allocated.end (Int) Int)
(assert (= (h_route.allocated.end 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_route.allocated.end x) (= (h_route.allocated.end (+ x 1)) (+ (h_route.allocated.end x) 1)) (= (h_route.allocated.end (+ x 1)) (h_route.allocated.end x))))))
(declare-fun t_tmpState_7 (Int) Bool)
(declare-fun h_tmpState_7 (Int) Int)
(assert (= (h_tmpState_7 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_tmpState_7 x) (= (h_tmpState_7 (+ x 1)) (+ (h_tmpState_7 x) 1)) (= (h_tmpState_7 (+ x 1)) (h_tmpState_7 x))))))
(declare-fun t_state_5.begin (Int) Bool)
(declare-fun h_state_5.begin (Int) Int)
(assert (= (h_state_5.begin 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_state_5.begin x) (= (h_state_5.begin (+ x 1)) (+ (h_state_5.begin x) 1)) (= (h_state_5.begin (+ x 1)) (h_state_5.begin x))))))
(declare-fun t_state_5.end (Int) Bool)
(declare-fun h_state_5.end (Int) Int)
(assert (= (h_state_5.end 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_state_5.end x) (= (h_state_5.end (+ x 1)) (+ (h_state_5.end x) 1)) (= (h_state_5.end (+ x 1)) (h_state_5.end x))))))
(declare-fun t_tmpState_10 (Int) Bool)
(declare-fun h_tmpState_10 (Int) Int)
(assert (= (h_tmpState_10 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_tmpState_10 x) (= (h_tmpState_10 (+ x 1)) (+ (h_tmpState_10 x) 1)) (= (h_tmpState_10 (+ x 1)) (h_tmpState_10 x))))))
(declare-fun t_route.unallocatedSample.begin (Int) Bool)
(declare-fun h_route.unallocatedSample.begin (Int) Int)
(assert (= (h_route.unallocatedSample.begin 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_route.unallocatedSample.begin x) (= (h_route.unallocatedSample.begin (+ x 1)) (+ (h_route.unallocatedSample.begin x) 1)) (= (h_route.unallocatedSample.begin (+ x 1)) (h_route.unallocatedSample.begin x))))))
(declare-fun t_route.unallocatedSample.end (Int) Bool)
(declare-fun h_route.unallocatedSample.end (Int) Int)
(assert (= (h_route.unallocatedSample.end 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_route.unallocatedSample.end x) (= (h_route.unallocatedSample.end (+ x 1)) (+ (h_route.unallocatedSample.end x) 1)) (= (h_route.unallocatedSample.end (+ x 1)) (h_route.unallocatedSample.end x))))))
(declare-fun t_tmpState_19 (Int) Bool)
(declare-fun h_tmpState_19 (Int) Int)
(assert (= (h_tmpState_19 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_tmpState_19 x) (= (h_tmpState_19 (+ x 1)) (+ (h_tmpState_19 x) 1)) (= (h_tmpState_19 (+ x 1)) (h_tmpState_19 x))))))
(declare-fun t_routeSignal.restrictiveSample.begin (Int) Bool)
(declare-fun h_routeSignal.restrictiveSample.begin (Int) Int)
(assert (= (h_routeSignal.restrictiveSample.begin 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_routeSignal.restrictiveSample.begin x) (= (h_routeSignal.restrictiveSample.begin (+ x 1)) (+ (h_routeSignal.restrictiveSample.begin x) 1)) (= (h_routeSignal.restrictiveSample.begin (+ x 1)) (h_routeSignal.restrictiveSample.begin x))))))
(declare-fun t_routeSignal.restrictiveSample.end (Int) Bool)
(declare-fun h_routeSignal.restrictiveSample.end (Int) Int)
(assert (= (h_routeSignal.restrictiveSample.end 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_routeSignal.restrictiveSample.end x) (= (h_routeSignal.restrictiveSample.end (+ x 1)) (+ (h_routeSignal.restrictiveSample.end x) 1)) (= (h_routeSignal.restrictiveSample.end (+ x 1)) (h_routeSignal.restrictiveSample.end x))))))
(declare-fun t_tmpState_20 (Int) Bool)
(declare-fun h_tmpState_20 (Int) Int)
(assert (= (h_tmpState_20 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_tmpState_20 x) (= (h_tmpState_20 (+ x 1)) (+ (h_tmpState_20 x) 1)) (= (h_tmpState_20 (+ x 1)) (h_tmpState_20 x))))))
(declare-fun t_route.occupiedSample.begin (Int) Bool)
(declare-fun h_route.occupiedSample.begin (Int) Int)
(assert (= (h_route.occupiedSample.begin 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_route.occupiedSample.begin x) (= (h_route.occupiedSample.begin (+ x 1)) (+ (h_route.occupiedSample.begin x) 1)) (= (h_route.occupiedSample.begin (+ x 1)) (h_route.occupiedSample.begin x))))))
(declare-fun t_route.occupiedSample.end (Int) Bool)
(declare-fun h_route.occupiedSample.end (Int) Int)
(assert (= (h_route.occupiedSample.end 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_route.occupiedSample.end x) (= (h_route.occupiedSample.end (+ x 1)) (+ (h_route.occupiedSample.end x) 1)) (= (h_route.occupiedSample.end (+ x 1)) (h_route.occupiedSample.end x))))))
(declare-fun t_tmpState_21 (Int) Bool)
(declare-fun h_tmpState_21 (Int) Int)
(assert (= (h_tmpState_21 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_tmpState_21 x) (= (h_tmpState_21 (+ x 1)) (+ (h_tmpState_21 x) 1)) (= (h_tmpState_21 (+ x 1)) (h_tmpState_21 x))))))
(declare-fun t_idealClock (Int) Bool)
(declare-fun h_idealClock (Int) Int)
(assert (= (h_idealClock 1) 0))
(assert (forall ((x Int)) (=> (>= x 1) (ite (t_idealClock x) (= (h_idealClock (+ x 1)) (+ (h_idealClock x) 1)) (= (h_idealClock (+ x 1)) (h_idealClock x))))))
(assert (forall ((x Int)) (=> (>= x 1) (= (t_idealClock x) true))))
(assert (forall ((x Int)) (=> (>= x 1) (or(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_route.unallocated.begin x) (h_route.unoccupied.begin x)) (= (h_routeSignalTmp.permissive.begin x) (h_route.unoccupied.begin x)) (= (h_routeSignalTmp.permissive.begin x) (h_route.unallocated.begin x))))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_routeSignalTmp.permissive.begin x) (h_train.non_talkativeTrainRunningApproach.begin x)) (= (h_routeSignal.permissive.begin x) (h_train.non_talkativeTrainRunningApproach.begin x)) (= (h_routeSignal.permissive.begin x) (h_routeSignalTmp.permissive.begin x))))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_route.unallocated.end x) (h_route.unoccupied.end x)) (= (h_routeSignalTmp.permissive.end x) (h_route.unallocated.end x)) (= (h_routeSignalTmp.permissive.end x) (h_route.unoccupied.end x))))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_routeSignalTmp.permissive.end x) (h_train.non_talkativeTrainRunningApproach.end x)) (= (h_routeSignal.permissive.end x) (h_routeSignalTmp.permissive.end x)) (= (h_routeSignal.permissive.end x) (h_train.non_talkativeTrainRunningApproach.end x))))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_route.unallocated.begin x) (h_route.unoccupied.begin x)) (= (h_routeTmp.occupied.begin x) (h_route.unoccupied.begin x)) (= (h_routeTmp.occupied.begin x) (h_route.unallocated.begin x))))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_routeTmp.occupied.begin x) (h_train.non_talkativeTrainRunningApproach.begin x)) (= (h_route.occupied.begin x) (h_train.non_talkativeTrainRunningApproach.begin x)) (= (h_route.occupied.begin x) (h_routeTmp.occupied.begin x))))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_route.unallocated.end x) (h_route.unoccupied.end x)) (= (h_routeTmp.occupied.end x) (h_route.unallocated.end x)) (= (h_routeTmp.occupied.end x) (h_route.unoccupied.end x))))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_routeTmp.occupied.end x) (h_train.non_talkativeTrainRunningApproach.end x)) (= (h_route.occupied.end x) (h_routeTmp.occupied.end x)) (= (h_route.occupied.end x) (h_train.non_talkativeTrainRunningApproach.end x))))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_routeSignal.permissive.begin x) (h_routeSignal.permissive.end x)) (not (t_routeSignal.permissive.end x)))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_routeSignal.permissive.begin x) 1) (= (h_tmpState_1 x) (- (h_routeSignal.permissive.begin x) 1)) (= (h_tmpState_1 x) 0)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_routeSignal.permissive.end x) (h_tmpState_1 x)) (not (t_tmpState_1 x)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_route.occupied.begin x) (h_route.occupied.end x)) (not (t_route.occupied.end x)))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_route.occupied.begin x) 1) (= (h_tmpState_2 x) (- (h_route.occupied.begin x) 1)) (= (h_tmpState_2 x) 0)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_route.occupied.end x) (h_tmpState_2 x)) (not (t_tmpState_2 x)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_route.unallocated.begin x) (h_route.unallocated.end x)) (not (t_route.unallocated.end x)))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_route.unallocated.begin x) 1) (= (h_tmpState_11 x) (- (h_route.unallocated.begin x) 1)) (= (h_tmpState_11 x) 0)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_route.unallocated.end x) (h_tmpState_11 x)) (not (t_tmpState_11 x)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_route.unoccupied.begin x) (h_route.unoccupied.end x)) (not (t_route.unoccupied.end x)))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_route.unoccupied.begin x) 1) (= (h_tmpState_12 x) (- (h_route.unoccupied.begin x) 1)) (= (h_tmpState_12 x) 0)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_route.unoccupied.end x) (h_tmpState_12 x)) (not (t_tmpState_12 x)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_train.non_talkativeTrainRunningApproach.begin x) (h_train.non_talkativeTrainRunningApproach.end x)) (not (t_train.non_talkativeTrainRunningApproach.end x)))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_train.non_talkativeTrainRunningApproach.begin x) 1) (= (h_tmpState_13 x) (- (h_train.non_talkativeTrainRunningApproach.begin x) 1)) (= (h_tmpState_13 x) 0)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_train.non_talkativeTrainRunningApproach.end x) (h_tmpState_13 x)) (not (t_tmpState_13 x)))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_routeSignal.permissive.begin x) (h_route.unallocated.begin x)) (= (h_stateTmp.begin x) (h_route.unallocated.begin x)) (= (h_stateTmp.begin x) (h_routeSignal.permissive.begin x))))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_stateTmp.begin x) (h_train.non_talkativeTrainRunningApproach.begin x)) (= (h_state.begin x) (h_train.non_talkativeTrainRunningApproach.begin x)) (= (h_state.begin x) (h_stateTmp.begin x))))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_routeSignal.permissive.end x) (h_route.unallocated.end x)) (= (h_stateTmp.end x) (h_routeSignal.permissive.end x)) (= (h_stateTmp.end x) (h_route.unallocated.end x))))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_stateTmp.end x) (h_train.non_talkativeTrainRunningApproach.end x)) (= (h_state.end x) (h_stateTmp.end x)) (= (h_state.end x) (h_train.non_talkativeTrainRunningApproach.end x))))))
(assert (forall ((x Int)) (=> (>= x 1) (>= (h_state.begin x) (h_train.non_talkativeTrainRunOnRoute x)))))
(assert (forall ((x Int)) (=> (>= x 1) (>= (h_train.non_talkativeTrainRunOnRoute x) (h_state.end x)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_state.begin x) (h_state.end x)) (not (t_state.end x)))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_state.begin x) 1) (= (h_tmpState x) (- (h_state.begin x) 1)) (= (h_tmpState x) 0)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_state.end x) (h_tmpState x)) (not (t_tmpState x)))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_routeSignal.permissive.begin x) (h_route.occupied.begin x)) (= (h_state_2.begin x) (h_route.occupied.begin x)) (= (h_state_2.begin x) (h_routeSignal.permissive.begin x))))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_routeSignal.permissive.end x) (h_route.occupied.end x)) (= (h_state_2.end x) (h_routeSignal.permissive.end x)) (= (h_state_2.end x) (h_route.occupied.end x))))))
(assert (forall ((x Int)) (=> (>= x 1) (>= (h_state_2.begin x) (h_train.non_talkativeTrainRunOnRoute x)))))
(assert (forall ((x Int)) (=> (>= x 1) (>= (h_train.non_talkativeTrainRunOnRoute x) (h_state_2.end x)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_train.non_talkativeTrainRunOnRoute x) (h_routeSignal.restrictive.begin x)) (not (t_routeSignal.restrictive.begin x)))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_train.non_talkativeTrainRunOnRoute x) 5) (= (h_tmp x) (- (h_train.non_talkativeTrainRunOnRoute x) 5)) (= (h_tmp x) 0)))))
(assert (forall ((x Int)) (=> (>= x 1) (>= (h_tmp x) (h_routeSignal.restrictive.begin x)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_state_2.begin x) (h_state_2.end x)) (not (t_state_2.end x)))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_state_2.begin x) 1) (= (h_tmpState_4 x) (- (h_state_2.begin x) 1)) (= (h_tmpState_4 x) 0)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_state_2.end x) (h_tmpState_4 x)) (not (t_tmpState_4 x)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_routeSignal.restrictive.begin x) (h_routeSignal.restrictive.end x)) (not (t_routeSignal.restrictive.end x)))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_routeSignal.restrictive.begin x) 1) (= (h_tmpState_5 x) (- (h_routeSignal.restrictive.begin x) 1)) (= (h_tmpState_5 x) 0)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_routeSignal.restrictive.end x) (h_tmpState_5 x)) (not (t_tmpState_5 x)))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_routeSignal.permissive.begin x) (h_train.talkativeTrainRunningApproach.begin x)) (= (h_state_4Tmp.begin x) (h_train.talkativeTrainRunningApproach.begin x)) (= (h_state_4Tmp.begin x) (h_routeSignal.permissive.begin x))))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_state_4Tmp.begin x) (h_route.unallocated.begin x)) (= (h_state_4.begin x) (h_route.unallocated.begin x)) (= (h_state_4.begin x) (h_state_4Tmp.begin x))))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_routeSignal.permissive.end x) (h_train.talkativeTrainRunningApproach.end x)) (= (h_state_4Tmp.end x) (h_routeSignal.permissive.end x)) (= (h_state_4Tmp.end x) (h_train.talkativeTrainRunningApproach.end x))))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_state_4Tmp.end x) (h_route.unallocated.end x)) (= (h_state_4.end x) (h_state_4Tmp.end x)) (= (h_state_4.end x) (h_route.unallocated.end x))))))
(assert (forall ((x Int)) (=> (>= x 1) (>= (h_state_4.begin x) (h_route.toBeAllocated x)))))
(assert (forall ((x Int)) (=> (>= x 1) (>= (h_route.toBeAllocated x) (h_state_4.end x)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_state_4.begin x) (h_state_4.end x)) (not (t_state_4.end x)))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_state_4.begin x) 1) (= (h_tmpState_6 x) (- (h_state_4.begin x) 1)) (= (h_tmpState_6 x) 0)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_state_4.end x) (h_tmpState_6 x)) (not (t_tmpState_6 x)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_train.talkativeTrainRunningApproach.begin x) (h_train.talkativeTrainRunningApproach.end x)) (not (t_train.talkativeTrainRunningApproach.end x)))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_train.talkativeTrainRunningApproach.begin x) 1) (= (h_tmpState_18 x) (- (h_train.talkativeTrainRunningApproach.begin x) 1)) (= (h_tmpState_18 x) 0)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_train.talkativeTrainRunningApproach.end x) (h_tmpState_18 x)) (not (t_tmpState_18 x)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (t_route.toBeAllocated x) (t_train.talkativeTrainRunAcrossSignal x)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (t_route.toBeAllocated x) (t_route.allocated.begin x)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (t_route.toBeAllocated x) (t_route.occupied.begin x)))))
(assert (forall ((x Int)) (=> (>= x 1) (>= (h_train.talkativeTrainRunAcrossSignal x) (h_train.talkativeTrainRunOnRoute x)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_route.allocated.begin x) (h_route.allocated.end x)) (not (t_route.allocated.end x)))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_route.allocated.begin x) 1) (= (h_tmpState_7 x) (- (h_route.allocated.begin x) 1)) (= (h_tmpState_7 x) 0)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_route.allocated.end x) (h_tmpState_7 x)) (not (t_tmpState_7 x)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (t_train.talkativeTrainRunAcrossSignal x) (t_routeSignal.restrictive.begin x)))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_route.allocated.begin x) (h_routeSignal.restrictive.begin x)) (= (h_state_5.begin x) (h_routeSignal.restrictive.begin x)) (= (h_state_5.begin x) (h_route.allocated.begin x))))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_route.allocated.end x) (h_routeSignal.restrictive.end x)) (= (h_state_5.end x) (h_route.allocated.end x)) (= (h_state_5.end x) (h_routeSignal.restrictive.end x))))))
(assert (forall ((x Int)) (=> (>= x 1) (>= (h_state_5.begin x) (h_train.talkativeTrainRunOnRoute x)))))
(assert (forall ((x Int)) (=> (>= x 1) (>= (h_train.talkativeTrainRunOnRoute x) (h_state_5.end x)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_state_5.begin x) (h_state_5.end x)) (not (t_state_5.end x)))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_state_5.begin x) 1) (= (h_tmpState_10 x) (- (h_state_5.begin x) 1)) (= (h_tmpState_10 x) 0)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_state_5.end x) (h_tmpState_10 x)) (not (t_tmpState_10 x)))))
(assert (forall ((x Int)) (=> (>= x 1) (or (not (t_train.talkativeTrainRunOnRoute x)) (not (t_train.non_talkativeTrainRunOnRoute x))))))
(assert (forall ((x Int)) (=> (>= x 1) (= (t_route.unallocatedSample.begin x) (or (t_route.unallocated.begin x) (t_route.allocated.begin x))))))
(assert (forall ((x Int)) (=> (>= x 1) (= (t_route.unallocatedSample.end x) (or (t_route.unallocated.end x) (t_route.allocated.end x))))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_route.unallocatedSample.begin x) (h_route.unallocatedSample.end x)) (not (t_route.unallocatedSample.end x)))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_route.unallocatedSample.begin x) 1) (= (h_tmpState_19 x) (- (h_route.unallocatedSample.begin x) 1)) (= (h_tmpState_19 x) 0)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_route.unallocatedSample.end x) (h_tmpState_19 x)) (not (t_tmpState_19 x)))))
(assert (forall ((x Int)) (=> (>= x 1) (or (not (t_route.unallocated.begin x)) (not (t_route.allocated.begin x))))))
(assert (forall ((x Int)) (=> (>= x 1) (or (not (t_route.unallocated.end x)) (not (t_route.allocated.end x))))))
(assert (forall ((x Int)) (=> (>= x 1) (= (t_routeSignal.restrictiveSample.begin x) (or (t_routeSignal.restrictive.begin x) (t_routeSignal.permissive.begin x))))))
(assert (forall ((x Int)) (=> (>= x 1) (= (t_routeSignal.restrictiveSample.end x) (or (t_routeSignal.restrictive.end x) (t_routeSignal.permissive.end x))))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_routeSignal.restrictiveSample.begin x) (h_routeSignal.restrictiveSample.end x)) (not (t_routeSignal.restrictiveSample.end x)))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_routeSignal.restrictiveSample.begin x) 1) (= (h_tmpState_20 x) (- (h_routeSignal.restrictiveSample.begin x) 1)) (= (h_tmpState_20 x) 0)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_routeSignal.restrictiveSample.end x) (h_tmpState_20 x)) (not (t_tmpState_20 x)))))
(assert (forall ((x Int)) (=> (>= x 1) (or (not (t_routeSignal.restrictive.begin x)) (not (t_routeSignal.permissive.begin x))))))
(assert (forall ((x Int)) (=> (>= x 1) (or (not (t_routeSignal.restrictive.end x)) (not (t_routeSignal.permissive.end x))))))
(assert (forall ((x Int)) (=> (>= x 1) (= (t_route.occupiedSample.begin x) (or (t_route.occupied.begin x) (t_route.unoccupied.begin x))))))
(assert (forall ((x Int)) (=> (>= x 1) (= (t_route.occupiedSample.end x) (or (t_route.occupied.end x) (t_route.unoccupied.end x))))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_route.occupiedSample.begin x) (h_route.occupiedSample.end x)) (not (t_route.occupiedSample.end x)))))
(assert (forall ((x Int)) (=> (>= x 1) (ite (>= (h_route.occupiedSample.begin x) 1) (= (h_tmpState_21 x) (- (h_route.occupiedSample.begin x) 1)) (= (h_tmpState_21 x) 0)))))
(assert (forall ((x Int)) (=> (>= x 1) (= (h_route.occupiedSample.end x) (h_tmpState_21 x)) (not (t_tmpState_21 x)))))
(assert (forall ((x Int)) (=> (>= x 1) (or (not (t_route.occupied.begin x)) (not (t_route.unoccupied.begin x))))))
(assert (forall ((x Int)) (=> (>= x 1) (or (not (t_route.occupied.end x)) (not (t_route.unoccupied.end x))))))
(check-sat)
