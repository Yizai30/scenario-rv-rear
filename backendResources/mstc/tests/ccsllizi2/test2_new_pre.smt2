(set-option :print-success false)
(set-option :produce-models true)
(set-logic AUFLIRA)
(declare-fun n () Int)
(assert (= n 10))
(declare-fun d () Int)
(assert (> d 0))
(declare-fun t_state.begin (Int) Bool)
(declare-fun h_state.begin (Int) Int)
(assert (= (h_state.begin 1) 0))
(assert (ite (t_state.begin 1) (= (h_state.begin 2) (+ (h_state.begin 1) 1)) (= (h_state.begin 2) (h_state.begin 1))))
(assert (ite (t_state.begin 2) (= (h_state.begin 3) (+ (h_state.begin 2) 1)) (= (h_state.begin 3) (h_state.begin 2))))
(assert (ite (t_state.begin 3) (= (h_state.begin 4) (+ (h_state.begin 3) 1)) (= (h_state.begin 4) (h_state.begin 3))))
(assert (ite (t_state.begin 4) (= (h_state.begin 5) (+ (h_state.begin 4) 1)) (= (h_state.begin 5) (h_state.begin 4))))
(assert (ite (t_state.begin 5) (= (h_state.begin 6) (+ (h_state.begin 5) 1)) (= (h_state.begin 6) (h_state.begin 5))))
(assert (ite (t_state.begin 6) (= (h_state.begin 7) (+ (h_state.begin 6) 1)) (= (h_state.begin 7) (h_state.begin 6))))
(assert (ite (t_state.begin 7) (= (h_state.begin 8) (+ (h_state.begin 7) 1)) (= (h_state.begin 8) (h_state.begin 7))))
(assert (ite (t_state.begin 8) (= (h_state.begin 9) (+ (h_state.begin 8) 1)) (= (h_state.begin 9) (h_state.begin 8))))
(assert (ite (t_state.begin 9) (= (h_state.begin 10) (+ (h_state.begin 9) 1)) (= (h_state.begin 10) (h_state.begin 9))))
(assert (ite (t_state.begin 10) (= (h_state.begin 11) (+ (h_state.begin 10) 1)) (= (h_state.begin 11) (h_state.begin 10))))
(declare-fun t_event1 (Int) Bool)
(declare-fun h_event1 (Int) Int)
(assert (= (h_event1 1) 0))
(assert (ite (t_event1 1) (= (h_event1 2) (+ (h_event1 1) 1)) (= (h_event1 2) (h_event1 1))))
(assert (ite (t_event1 2) (= (h_event1 3) (+ (h_event1 2) 1)) (= (h_event1 3) (h_event1 2))))
(assert (ite (t_event1 3) (= (h_event1 4) (+ (h_event1 3) 1)) (= (h_event1 4) (h_event1 3))))
(assert (ite (t_event1 4) (= (h_event1 5) (+ (h_event1 4) 1)) (= (h_event1 5) (h_event1 4))))
(assert (ite (t_event1 5) (= (h_event1 6) (+ (h_event1 5) 1)) (= (h_event1 6) (h_event1 5))))
(assert (ite (t_event1 6) (= (h_event1 7) (+ (h_event1 6) 1)) (= (h_event1 7) (h_event1 6))))
(assert (ite (t_event1 7) (= (h_event1 8) (+ (h_event1 7) 1)) (= (h_event1 8) (h_event1 7))))
(assert (ite (t_event1 8) (= (h_event1 9) (+ (h_event1 8) 1)) (= (h_event1 9) (h_event1 8))))
(assert (ite (t_event1 9) (= (h_event1 10) (+ (h_event1 9) 1)) (= (h_event1 10) (h_event1 9))))
(assert (ite (t_event1 10) (= (h_event1 11) (+ (h_event1 10) 1)) (= (h_event1 11) (h_event1 10))))
(declare-fun t_event2 (Int) Bool)
(declare-fun h_event2 (Int) Int)
(assert (= (h_event2 1) 0))
(assert (ite (t_event2 1) (= (h_event2 2) (+ (h_event2 1) 1)) (= (h_event2 2) (h_event2 1))))
(assert (ite (t_event2 2) (= (h_event2 3) (+ (h_event2 2) 1)) (= (h_event2 3) (h_event2 2))))
(assert (ite (t_event2 3) (= (h_event2 4) (+ (h_event2 3) 1)) (= (h_event2 4) (h_event2 3))))
(assert (ite (t_event2 4) (= (h_event2 5) (+ (h_event2 4) 1)) (= (h_event2 5) (h_event2 4))))
(assert (ite (t_event2 5) (= (h_event2 6) (+ (h_event2 5) 1)) (= (h_event2 6) (h_event2 5))))
(assert (ite (t_event2 6) (= (h_event2 7) (+ (h_event2 6) 1)) (= (h_event2 7) (h_event2 6))))
(assert (ite (t_event2 7) (= (h_event2 8) (+ (h_event2 7) 1)) (= (h_event2 8) (h_event2 7))))
(assert (ite (t_event2 8) (= (h_event2 9) (+ (h_event2 8) 1)) (= (h_event2 9) (h_event2 8))))
(assert (ite (t_event2 9) (= (h_event2 10) (+ (h_event2 9) 1)) (= (h_event2 10) (h_event2 9))))
(assert (ite (t_event2 10) (= (h_event2 11) (+ (h_event2 10) 1)) (= (h_event2 11) (h_event2 10))))
(declare-fun t_state.end (Int) Bool)
(declare-fun h_state.end (Int) Int)
(assert (= (h_state.end 1) 0))
(assert (ite (t_state.end 1) (= (h_state.end 2) (+ (h_state.end 1) 1)) (= (h_state.end 2) (h_state.end 1))))
(assert (ite (t_state.end 2) (= (h_state.end 3) (+ (h_state.end 2) 1)) (= (h_state.end 3) (h_state.end 2))))
(assert (ite (t_state.end 3) (= (h_state.end 4) (+ (h_state.end 3) 1)) (= (h_state.end 4) (h_state.end 3))))
(assert (ite (t_state.end 4) (= (h_state.end 5) (+ (h_state.end 4) 1)) (= (h_state.end 5) (h_state.end 4))))
(assert (ite (t_state.end 5) (= (h_state.end 6) (+ (h_state.end 5) 1)) (= (h_state.end 6) (h_state.end 5))))
(assert (ite (t_state.end 6) (= (h_state.end 7) (+ (h_state.end 6) 1)) (= (h_state.end 7) (h_state.end 6))))
(assert (ite (t_state.end 7) (= (h_state.end 8) (+ (h_state.end 7) 1)) (= (h_state.end 8) (h_state.end 7))))
(assert (ite (t_state.end 8) (= (h_state.end 9) (+ (h_state.end 8) 1)) (= (h_state.end 9) (h_state.end 8))))
(assert (ite (t_state.end 9) (= (h_state.end 10) (+ (h_state.end 9) 1)) (= (h_state.end 10) (h_state.end 9))))
(assert (ite (t_state.end 10) (= (h_state.end 11) (+ (h_state.end 10) 1)) (= (h_state.end 11) (h_state.end 10))))
(declare-fun t_tmp_1 (Int) Bool)
(declare-fun h_tmp_1 (Int) Int)
(assert (= (h_tmp_1 1) 0))
(assert (ite (t_tmp_1 1) (= (h_tmp_1 2) (+ (h_tmp_1 1) 1)) (= (h_tmp_1 2) (h_tmp_1 1))))
(assert (ite (t_tmp_1 2) (= (h_tmp_1 3) (+ (h_tmp_1 2) 1)) (= (h_tmp_1 3) (h_tmp_1 2))))
(assert (ite (t_tmp_1 3) (= (h_tmp_1 4) (+ (h_tmp_1 3) 1)) (= (h_tmp_1 4) (h_tmp_1 3))))
(assert (ite (t_tmp_1 4) (= (h_tmp_1 5) (+ (h_tmp_1 4) 1)) (= (h_tmp_1 5) (h_tmp_1 4))))
(assert (ite (t_tmp_1 5) (= (h_tmp_1 6) (+ (h_tmp_1 5) 1)) (= (h_tmp_1 6) (h_tmp_1 5))))
(assert (ite (t_tmp_1 6) (= (h_tmp_1 7) (+ (h_tmp_1 6) 1)) (= (h_tmp_1 7) (h_tmp_1 6))))
(assert (ite (t_tmp_1 7) (= (h_tmp_1 8) (+ (h_tmp_1 7) 1)) (= (h_tmp_1 8) (h_tmp_1 7))))
(assert (ite (t_tmp_1 8) (= (h_tmp_1 9) (+ (h_tmp_1 8) 1)) (= (h_tmp_1 9) (h_tmp_1 8))))
(assert (ite (t_tmp_1 9) (= (h_tmp_1 10) (+ (h_tmp_1 9) 1)) (= (h_tmp_1 10) (h_tmp_1 9))))
(assert (ite (t_tmp_1 10) (= (h_tmp_1 11) (+ (h_tmp_1 10) 1)) (= (h_tmp_1 11) (h_tmp_1 10))))
(declare-fun t_idealClock (Int) Bool)
(declare-fun h_idealClock (Int) Int)
(assert (= (h_idealClock 1) 0))
(assert (ite (t_idealClock 1) (= (h_idealClock 2) (+ (h_idealClock 1) 1)) (= (h_idealClock 2) (h_idealClock 1))))
(assert (ite (t_idealClock 2) (= (h_idealClock 3) (+ (h_idealClock 2) 1)) (= (h_idealClock 3) (h_idealClock 2))))
(assert (ite (t_idealClock 3) (= (h_idealClock 4) (+ (h_idealClock 3) 1)) (= (h_idealClock 4) (h_idealClock 3))))
(assert (ite (t_idealClock 4) (= (h_idealClock 5) (+ (h_idealClock 4) 1)) (= (h_idealClock 5) (h_idealClock 4))))
(assert (ite (t_idealClock 5) (= (h_idealClock 6) (+ (h_idealClock 5) 1)) (= (h_idealClock 6) (h_idealClock 5))))
(assert (ite (t_idealClock 6) (= (h_idealClock 7) (+ (h_idealClock 6) 1)) (= (h_idealClock 7) (h_idealClock 6))))
(assert (ite (t_idealClock 7) (= (h_idealClock 8) (+ (h_idealClock 7) 1)) (= (h_idealClock 8) (h_idealClock 7))))
(assert (ite (t_idealClock 8) (= (h_idealClock 9) (+ (h_idealClock 8) 1)) (= (h_idealClock 9) (h_idealClock 8))))
(assert (ite (t_idealClock 9) (= (h_idealClock 10) (+ (h_idealClock 9) 1)) (= (h_idealClock 10) (h_idealClock 9))))
(assert (ite (t_idealClock 10) (= (h_idealClock 11) (+ (h_idealClock 10) 1)) (= (h_idealClock 11) (h_idealClock 10))))
(assert (forall ((x Int)) (=> (and (>= x 1) (<= x n)) (= (t_idealClock x) true))))
(assert (forall ((x Int)) (=> (and (>= x 1) (<= x n)) (or (t_state.begin x) (t_event1 x) (t_event2 x) (t_state.end x) (t_tmp_1 x)))))
(assert (and ( > (h_state.begin 11) 0) (> (h_event1 11) 0) (> (h_event2 11) 0) (> (h_state.end 11) 0) (> (h_tmp_1 11) 0)))
(assert (forall ((x Int)) (=> (and (>= x 1) (<= x n)) (= (h_state.begin x) (h_event1 x)) (not (t_event1 x)))))
(assert (forall ((x Int)) (=> (and (>= x 1) (<= x n)) (= (h_event1 x) (h_event2 x)) (not (t_event2 x)))))
(assert (forall ((x Int)) (=> (and (>= x 1) (<= x n)) (= (h_event2 x) (h_state.end x)) (not (t_state.end x)))))
(assert (forall ((x Int)) (=> (and (>= x 1) (<= x n)) (= (h_state.begin x) (h_tmp_1 x)) (not (t_tmp_1 x)))))
(assert (forall ((x Int)) (=> (and (>= x 1) (<= x n)) (= (h_state.end x) (h_tmp_1 x)) (not (t_tmp_1 x)))))
(assert (forall ((x Int)) (=> (and (>= x 1) (<= x n)) (= (h_state.begin x) (h_event1 x)) (not (t_event1 x)))))
(assert (forall ((x Int)) (=> (and (>= x 1) (<= x n)) (= (h_event1 x) (h_state.end x)) (not (t_state.end x)))))
(assert (forall ((x Int)) (=> (and (>= x 1) (<= x n)) (= (h_event2 x) (h_state.begin x)) (not (t_state.begin x)))))
(assert (forall ((x Int)) (=> (and (>= x 1) (<= x n)) (= (h_state.begin x) (h_state.end x)) (not (t_state.end x)))))
(assert (forall ((x Int)) (=> (and (>= x 1) (<= x n)) (= (h_event2 x) (h_tmp_1 x)) (not (t_tmp_1 x)))))
(assert (forall ((x Int)) (=> (and (>= x 1) (<= x n)) (= (h_state.end x) (h_tmp_1 x)) (not (t_tmp_1 x)))))
(check-sat)
(get-value ((t_state.begin 1)))
(get-value ((t_state.begin 2)))
(get-value ((t_state.begin 3)))
(get-value ((t_state.begin 4)))
(get-value ((t_state.begin 5)))
(get-value ((t_state.begin 6)))
(get-value ((t_state.begin 7)))
(get-value ((t_state.begin 8)))
(get-value ((t_state.begin 9)))
(get-value ((t_state.begin 10)))
(get-value ((t_event1 1)))
(get-value ((t_event1 2)))
(get-value ((t_event1 3)))
(get-value ((t_event1 4)))
(get-value ((t_event1 5)))
(get-value ((t_event1 6)))
(get-value ((t_event1 7)))
(get-value ((t_event1 8)))
(get-value ((t_event1 9)))
(get-value ((t_event1 10)))
(get-value ((t_event2 1)))
(get-value ((t_event2 2)))
(get-value ((t_event2 3)))
(get-value ((t_event2 4)))
(get-value ((t_event2 5)))
(get-value ((t_event2 6)))
(get-value ((t_event2 7)))
(get-value ((t_event2 8)))
(get-value ((t_event2 9)))
(get-value ((t_event2 10)))
(get-value ((t_state.end 1)))
(get-value ((t_state.end 2)))
(get-value ((t_state.end 3)))
(get-value ((t_state.end 4)))
(get-value ((t_state.end 5)))
(get-value ((t_state.end 6)))
(get-value ((t_state.end 7)))
(get-value ((t_state.end 8)))
(get-value ((t_state.end 9)))
(get-value ((t_state.end 10)))
(get-value ((t_tmp_1 1)))
(get-value ((t_tmp_1 2)))
(get-value ((t_tmp_1 3)))
(get-value ((t_tmp_1 4)))
(get-value ((t_tmp_1 5)))
(get-value ((t_tmp_1 6)))
(get-value ((t_tmp_1 7)))
(get-value ((t_tmp_1 8)))
(get-value ((t_tmp_1 9)))
(get-value ((t_tmp_1 10)))
